//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public PlayerActionInputComponent playerActionInput { get { return (PlayerActionInputComponent)GetComponent(GameComponentsLookup.PlayerActionInput); } }
    public bool hasPlayerActionInput { get { return HasComponent(GameComponentsLookup.PlayerActionInput); } }

    public void AddPlayerActionInput(GameEntity newEntity, InteractibleView newInteractible) {
        var index = GameComponentsLookup.PlayerActionInput;
        var component = CreateComponent<PlayerActionInputComponent>(index);
        component.Entity = newEntity;
        component.Interactible = newInteractible;
        AddComponent(index, component);
    }

    public void ReplacePlayerActionInput(GameEntity newEntity, InteractibleView newInteractible) {
        var index = GameComponentsLookup.PlayerActionInput;
        var component = CreateComponent<PlayerActionInputComponent>(index);
        component.Entity = newEntity;
        component.Interactible = newInteractible;
        ReplaceComponent(index, component);
    }

    public void RemovePlayerActionInput() {
        RemoveComponent(GameComponentsLookup.PlayerActionInput);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherPlayerActionInput;

    public static Entitas.IMatcher<GameEntity> PlayerActionInput {
        get {
            if (_matcherPlayerActionInput == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.PlayerActionInput);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherPlayerActionInput = matcher;
            }

            return _matcherPlayerActionInput;
        }
    }
}
